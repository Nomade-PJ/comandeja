// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { applyRequestLimiter } from '@/middlewares/requestLimiter';
import { getCachedData as getCachedDataUtil } from '@/lib/cache-utils';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;
// Definir o nível de log (true para desenvolvimento, false para produção)
const ENABLE_DETAILED_LOGS = false;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('As variáveis de ambiente do Supabase não estão configuradas');
}

// Configurações otimizadas para evitar problemas de conexão
const supabaseOptions = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'comandeja_auth_token',
    storage: localStorage,
  },
  realtime: {
    params: {
      eventsPerSecond: 1, // Reduzido para evitar throttling
    },
    heartbeat: {
      interval: 5000, // Aumentado para reduzir frequência
      maxRetries: 5, // Reduzido para falhar mais rápido e tentar nova conexão
    },
    reconnect: {
      delay: 1000, // Aumentado para dar mais tempo entre tentativas
      maxRetries: 5, // Reduzido para evitar muitas tentativas
      retryInterval: 1000,
      timed: true,
    },
    timeout: 60000, // Aumentado para 60 segundos
  },
  global: {
    headers: {
      'X-Client-Info': 'comandeja-web',
      'X-Client-Version': '1.0.0',
    },
  },
  persistSession: true,
  // Logs desativados para evitar poluição do console
  logger: {
    error: (...args) => ENABLE_DETAILED_LOGS && console.error(...args),
    warn: () => {},
    info: () => {},
    debug: () => {},
  }
};

// Criar o cliente Supabase com configurações otimizadas
const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, supabaseOptions);

// Aplicar o limitador de requisições
applyRequestLimiter(supabaseClient);

// Exportar o cliente com limitador aplicado
export const supabase = supabaseClient;

// Configurações padrão para cache
const DEFAULT_CACHE_DURATION = 60 * 1000; // 1 minuto

/**
 * Função para obter dados do cache ou da API
 * @param key Chave única para o cache
 * @param fetchFn Função para buscar os dados se não estiverem em cache
 * @param cacheDuration Duração do cache em milissegundos
 * @param storage Tipo de armazenamento ('memory' ou 'local')
 * @returns Promise com os dados
 */
export async function getCachedData<T>(
  key: string,
  fetchFn: () => Promise<T>,
  cacheDuration = DEFAULT_CACHE_DURATION,
  storage: 'memory' | 'local' = 'memory'
): Promise<T> {
  return getCachedDataUtil(key, fetchFn, {
    duration: cacheDuration,
    storage,
    prefix: 'comandeja_api_'
  });
}

// Função utilitária para logging condicional
export function logDebug(...args: any[]) {
  if (ENABLE_DETAILED_LOGS) {
    console.log('[Comandeja Debug]:', ...args);
  }
}